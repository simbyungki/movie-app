{"version":3,"sources":["component/Header.js","component/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","MoviePoster","_ref2","poster","title","src","alt","MovieGenre","_ref3","genre","Movie","_ref","id","genres","synopsis","data-id","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","sortType","_renderMovies","_this","movies","movie","component_Movie","title_english","medium_cover_image","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","concat","then","response","json","data","catch","err","console","log","src_component_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25400d81.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return (\r\n            <header className=\"Header\">\r\n                <h1 className=\"ProjectTitle\">MOVIE RANK</h1>\r\n                <div className=\"Sort\">\r\n                    <a href=\"javascript:;\" className=\"Active\">다운로드순</a>\r\n                    <a href=\"javascript:;\">인기순</a>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nfunction Movie({poster, title, id, genres, synopsis}){\r\n    return (\r\n        <div className=\"MovieCard\" data-id={id}>\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} title={title} />\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters' \r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//dumb\r\nfunction MoviePoster({poster, title}){\r\n    return (\r\n        <img src={poster} alt={title} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    id : PropTypes.number.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    //sysnopsis : PropTypes.string,\r\n    genres : PropTypes.array\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/Header';\nimport Movie from './component/Movie';\n\nclass App extends Component {\n\n    state = {\n        sortType: 'download_count'\n    }\n\n    componentDidMount(){\n        this._getMovies();\n    }\n\n    _renderMovies = () => {\n        const renderMovies = this.state.movies.map(movie => {\n            return (\n                <Movie \n                    title={movie.title_english} \n                    poster={movie.medium_cover_image} \n                    id={movie.id} \n                    key={movie.id} \n                    genres={movie.genres} \n                    synopsis={movie.synopsis}\n                 />\n            )\n        })\n        return renderMovies;\n    }\n\n    _getMovies = async () => {\n        const movies = await this._callApi()\n        this.setState({\n            movies\n        });\n    }\n\n    _callApi = () => {\n        return fetch(`https://yts.am/api/v2/list_movies.json?sort_by=${this.state.sortType}`)\n        .then(response => response.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err))\n    }\n\n\n    render() {\n        const {movies} = this.state;\n        return (\n            \n            <div className={movies ? \"App\" : \"App--loading\"}>\n                <Header />\n                <div className=\"Contents\">\n                    {movies ? this._renderMovies() : 'Loading'}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}